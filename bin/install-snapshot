#! /usr/bin/env python
#
# $Id: jarfind 741 2006-06-19 08:24:02Z jbq $
#
# Copyright (c) 2007, Jean-Baptiste Quenot <jbq@caraldi.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * The name of the contributors may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import patchdist, sys, getopt, os.path

def usage():
    print "Usage: %s -o <organisation> -n <name> -r <base version> <working copy>" % os.path.basename(sys.argv[0])
    print
    print """  NOTE: In the artifact name, <base version>-SNAPSHOT will be replaced
        with <base version>-r<svnversion>"""
    sys.exit(1)

if __name__ == "__main__":
    rev = org = name = None
    skipbuild = 0
    opts, args = getopt.getopt (sys.argv[1:], 'sr:n:o:', ['rev=', 'name=', 'org='])

    # Fetch options
    for o, a in opts:
        if o in ("-s"):
            skipbuild=1
        if o in ("-r", "--rev"):
            rev=a
        elif o in ("-o", "--org"):
            org=a
        elif o in ("-n", "--name"):
            name=a

    if not(rev) or not(org) or not(name) or not(args):
        usage()

    builddir = args[0]
    repo = args[1]
    print "Installing snapshot from %s" % builddir
    print "Using repository %s" % repo
    svnversion = os.popen("svnversion %s/src" % builddir)
    version = rev + "-r" + svnversion.read().rstrip()
    svnversion.close()
    print
    sys.stdout.write("Found revision %s [Ctrl-C to abort] [any key to continue] " % version)
    sys.stdin.readline().rstrip()
    if not(skipbuild):
        os.system("cd %s && mvn clean package source:jar -Dmaven.test.skip=true" % builddir)
    artifact = "%s/%s/%s/%s" % (repo, org, name, version)
    print
    print "Installing into %s" % artifact
    jars = "%s/jars" % artifact
    sources = "%s/sources" % artifact
    for dir in (jars, sources):
        if not(os.path.exists(dir)):
            os.makedirs(dir)
    patchdist.copyJar("%s/target/%s-%s-SNAPSHOT.jar" % (builddir, name, rev), "%s/%s-%s.jar" % (jars, name, version))
    patchdist.copyJar("%s/target/%s-%s-SNAPSHOT-sources.jar" % (builddir, name, rev), "%s/%s-%s.jar" % (sources, name, version))
    patchdist.checkVersionControl(artifact)
    patchdist.createIvyFile(artifact, version)
