Index: src/main/java/wicket/RestartResponseAtOriginalDestination.java
===================================================================
--- src/main/java/wicket/RestartResponseAtOriginalDestination.java	(revision 0)
+++ src/main/java/wicket/RestartResponseAtOriginalDestination.java	(revision 0)
@@ -0,0 +1,70 @@
+/*
+ * $Id: RestartResponseAtInterceptPageException.java,v 1.10 2006/02/13 00:16:32
+ * jonathanlocke Exp $ $Revision: 4409 $ $Date: 2006-02-13 10:27:16 +0100 (Mon, 13 Feb 2006) $
+ * 
+ * ==============================================================================
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package wicket;
+
+/**
+ * Causes Wicket to interrupt current request processing and immediately
+ * continue to the original destination, before it got intercepted.
+ * <p>
+ * Similar to calling continueToOriginalDestination() with the difference that this
+ * exception will interrupt processing of the current request.
+ * 
+ * @see wicket.PageMap#continueToOriginalDestination()
+ * @see wicket.Component#continueToOriginalDestination()
+ * 
+ * @author Igor Vaynberg (ivaynberg)
+ * @author Jonathan Locke
+ * @author Philip Chapman
+ */
+public class RestartResponseAtOriginalDestination extends AbstractRestartResponseException
+{
+	private static final long serialVersionUID = 1L;
+
+	/**
+	 * Continue to the original destination, before it got intercepted
+	 */
+	public RestartResponseAtOriginalDestination()
+	{
+		continueToOriginalDestination();
+	}
+
+	/**
+	 * Continue to the original destination using the page map for the current request
+	 */
+	private void continueToOriginalDestination()
+	{
+		final Page requestPage = RequestCycle.get().getRequest().getPage();
+
+		/*
+		 * requestPage can be null if we throw the restart response exception
+		 * before any page is instantiated in user's session. if this happens we
+		 * throw a meaningful error message.
+		 */
+		final IPageMap pageMap;
+		if (requestPage != null)
+		{
+			pageMap = requestPage.getPageMap();
+		}
+		else
+		{
+			throw new RuntimeException("The current request has no associated page, please use Component.continueToOriginalDestination() directly");
+		}
+
+		pageMap.continueToOriginalDestination();
+	}
+}
